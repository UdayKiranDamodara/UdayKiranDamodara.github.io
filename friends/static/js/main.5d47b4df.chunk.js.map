{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","index","key","SearchBox","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAaeA,MAXf,YAAkC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAAOC,EAAK,EAALA,GAC1B,OACE,yBAAKC,UAAU,sDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACrB,6BACE,4BAAKF,GACL,2BAAKC,MCaEK,MAlBf,YAA6B,IAAVC,EAAS,EAATA,OACf,OACA,6BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACQ,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,aCGxBW,MAbf,YAAqC,IAAhBC,EAAe,EAAfA,aACnB,OACE,yBAAKV,UAAU,OACb,2BACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,cACZC,SAAUH,MCwBHN,EAjCA,CACb,CACEL,GAAI,EACJF,KAAM,aACNiB,SAAU,aACVhB,MAAO,+BAET,CACEC,GAAI,EACJF,KAAM,mBACNiB,SAAU,SACVhB,MAAO,uBAET,CACEC,GAAI,EACJF,KAAM,eACNiB,SAAU,UACVhB,MAAO,mBAET,CACEC,GAAI,EACJF,KAAM,sBACNiB,SAAU,UACVhB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,kBACNiB,SAAU,SACVhB,MAAO,uBCMIiB,E,kDA5Bb,aAAc,IAAD,8BACX,gBAOFC,eAAe,SAACC,GAEd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SARzC,EAAKC,MAAQ,CACXlB,OAAQA,EACRe,YAAa,IAJJ,E,qDAcJ,IAAD,OACAI,EAAiBC,KAAKF,MAAMlB,OAAOqB,QAAO,SAAArB,GAC9C,OAAOA,EAAOP,KAAK6B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAEnE,OACE,yBAAK1B,UAAU,MACb,uCACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKR,iBAC9B,kBAAC,EAAD,CAAUZ,OAAQmB,S,GAxBRK,a,MCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5d47b4df.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card({name, email, id}) {\n  return (\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src= {`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{ email}</p>\n      </div>\n    </div>);\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nfunction CardList({robots}) {\n    return (\n    <div>\n      {robots.map((user, index) =>{\n        return (\n                <Card\n                  key={index}\n                  id={robots[index].id}\n                  name={robots[index].name}\n                  email={robots[index].email}\n                  />\n                )\n      })\n    }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nfunction SearchBox({ searchChange }){\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search name'\n        onChange={searchChange}\n        />\n    </div>\n  )\n}\n\nexport default SearchBox;\n","const robots = [\n  {\n    id: 1,\n    name: 'Uday Kiran',\n    username: 'udayuchiha',\n    email: 'udaykirandamodara@gmail.com',\n  },\n  {\n    id: 2,\n    name: 'Girish Chalumuri',\n    username: 'Girish',\n    email: 'girish123@gmail.com',\n  },\n  {\n    id: 3,\n    name: 'Hitesh Kumar',\n    username: 'Legolas',\n    email: 'khshk@gmail.com',\n  },\n  {\n    id: 4,\n    name: 'Hemanth Bollamreddi',\n    username: 'Hemanth',\n    email: 'blmhemu@gmail.com',\n  },\n  {\n    id: 5,\n    name: 'Gautam Yakasiri',\n    username: 'Gautam',\n    email: 'ygautam@iitk.ac.in',\n  }\n];\n\nexport default robots;\n","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport robots from './robots';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n      robots: robots,\n      searchfield: '',\n    }\n  }\n\n  onSearchChange=(event)=>{\n    //console.log(event.target.value);\n    this.setState({searchfield: event.target.value});\n    //console.log(filteredRobots);\n  }\n\n  render(){\n    const filteredRobots = this.state.robots.filter(robots =>{\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    });\n    return(\n      <div className='tc'>\n        <h1>Friends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <CardList robots={filteredRobots}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './App';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}